// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eap.proto

package protos // import "magma/feg/gateway/services/aaa/protos"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EapType int32

const (
	// Mandatory EAP Method types
	EapType_Reserved      EapType = 0
	EapType_Identity      EapType = 1
	EapType_Notification  EapType = 2
	EapType_Legacy_Nak    EapType = 3
	EapType_MD5_Challenge EapType = 4
	EapType_Expanded      EapType = 254
	EapType_Experimental  EapType = 255
	// EAP Method Authenticator types
	EapType_TLS      EapType = 13
	EapType_SIM      EapType = 18
	EapType_AKA      EapType = 23
	EapType_AKAPrime EapType = 50
)

var EapType_name = map[int32]string{
	0:   "Reserved",
	1:   "Identity",
	2:   "Notification",
	3:   "Legacy_Nak",
	4:   "MD5_Challenge",
	254: "Expanded",
	255: "Experimental",
	13:  "TLS",
	18:  "SIM",
	23:  "AKA",
	50:  "AKAPrime",
}
var EapType_value = map[string]int32{
	"Reserved":      0,
	"Identity":      1,
	"Notification":  2,
	"Legacy_Nak":    3,
	"MD5_Challenge": 4,
	"Expanded":      254,
	"Experimental":  255,
	"TLS":           13,
	"SIM":           18,
	"AKA":           23,
	"AKAPrime":      50,
}

func (x EapType) String() string {
	return proto.EnumName(EapType_name, int32(x))
}
func (EapType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eap_21f73d95affd57ca, []int{0}
}

type EapCode int32

const (
	EapCode_Undefined EapCode = 0
	EapCode_Request   EapCode = 1
	EapCode_Response  EapCode = 2
	EapCode_Success   EapCode = 3
	EapCode_Failure   EapCode = 4
)

var EapCode_name = map[int32]string{
	0: "Undefined",
	1: "Request",
	2: "Response",
	3: "Success",
	4: "Failure",
}
var EapCode_value = map[string]int32{
	"Undefined": 0,
	"Request":   1,
	"Response":  2,
	"Success":   3,
	"Failure":   4,
}

func (x EapCode) String() string {
	return proto.EnumName(EapCode_name, int32(x))
}
func (EapCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eap_21f73d95affd57ca, []int{1}
}

type Eap struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Ctx                  *Context `protobuf:"bytes,2,opt,name=ctx,proto3" json:"ctx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Eap) Reset()         { *m = Eap{} }
func (m *Eap) String() string { return proto.CompactTextString(m) }
func (*Eap) ProtoMessage()    {}
func (*Eap) Descriptor() ([]byte, []int) {
	return fileDescriptor_eap_21f73d95affd57ca, []int{0}
}
func (m *Eap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Eap.Unmarshal(m, b)
}
func (m *Eap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Eap.Marshal(b, m, deterministic)
}
func (dst *Eap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eap.Merge(dst, src)
}
func (m *Eap) XXX_Size() int {
	return xxx_messageInfo_Eap.Size(m)
}
func (m *Eap) XXX_DiscardUnknown() {
	xxx_messageInfo_Eap.DiscardUnknown(m)
}

var xxx_messageInfo_Eap proto.InternalMessageInfo

func (m *Eap) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Eap) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type EapIdentity struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Ctx                  *Context `protobuf:"bytes,2,opt,name=ctx,proto3" json:"ctx,omitempty"`
	Method               uint32   `protobuf:"varint,3,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EapIdentity) Reset()         { *m = EapIdentity{} }
func (m *EapIdentity) String() string { return proto.CompactTextString(m) }
func (*EapIdentity) ProtoMessage()    {}
func (*EapIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_eap_21f73d95affd57ca, []int{1}
}
func (m *EapIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EapIdentity.Unmarshal(m, b)
}
func (m *EapIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EapIdentity.Marshal(b, m, deterministic)
}
func (dst *EapIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EapIdentity.Merge(dst, src)
}
func (m *EapIdentity) XXX_Size() int {
	return xxx_messageInfo_EapIdentity.Size(m)
}
func (m *EapIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_EapIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_EapIdentity proto.InternalMessageInfo

func (m *EapIdentity) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *EapIdentity) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *EapIdentity) GetMethod() uint32 {
	if m != nil {
		return m.Method
	}
	return 0
}

type EapMethodList struct {
	Methods              []byte   `protobuf:"bytes,1,opt,name=methods,proto3" json:"methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EapMethodList) Reset()         { *m = EapMethodList{} }
func (m *EapMethodList) String() string { return proto.CompactTextString(m) }
func (*EapMethodList) ProtoMessage()    {}
func (*EapMethodList) Descriptor() ([]byte, []int) {
	return fileDescriptor_eap_21f73d95affd57ca, []int{2}
}
func (m *EapMethodList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EapMethodList.Unmarshal(m, b)
}
func (m *EapMethodList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EapMethodList.Marshal(b, m, deterministic)
}
func (dst *EapMethodList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EapMethodList.Merge(dst, src)
}
func (m *EapMethodList) XXX_Size() int {
	return xxx_messageInfo_EapMethodList.Size(m)
}
func (m *EapMethodList) XXX_DiscardUnknown() {
	xxx_messageInfo_EapMethodList.DiscardUnknown(m)
}

var xxx_messageInfo_EapMethodList proto.InternalMessageInfo

func (m *EapMethodList) GetMethods() []byte {
	if m != nil {
		return m.Methods
	}
	return nil
}

type DummyAddSessionReq struct {
	Ctx                  *Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyAddSessionReq) Reset()         { *m = DummyAddSessionReq{} }
func (m *DummyAddSessionReq) String() string { return proto.CompactTextString(m) }
func (*DummyAddSessionReq) ProtoMessage()    {}
func (*DummyAddSessionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eap_21f73d95affd57ca, []int{3}
}
func (m *DummyAddSessionReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DummyAddSessionReq.Unmarshal(m, b)
}
func (m *DummyAddSessionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DummyAddSessionReq.Marshal(b, m, deterministic)
}
func (dst *DummyAddSessionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyAddSessionReq.Merge(dst, src)
}
func (m *DummyAddSessionReq) XXX_Size() int {
	return xxx_messageInfo_DummyAddSessionReq.Size(m)
}
func (m *DummyAddSessionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyAddSessionReq.DiscardUnknown(m)
}

var xxx_messageInfo_DummyAddSessionReq proto.InternalMessageInfo

func (m *DummyAddSessionReq) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type DummyAddSessionRsp struct {
	Ctx                  *Context `protobuf:"bytes,1,opt,name=ctx,proto3" json:"ctx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyAddSessionRsp) Reset()         { *m = DummyAddSessionRsp{} }
func (m *DummyAddSessionRsp) String() string { return proto.CompactTextString(m) }
func (*DummyAddSessionRsp) ProtoMessage()    {}
func (*DummyAddSessionRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_eap_21f73d95affd57ca, []int{4}
}
func (m *DummyAddSessionRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DummyAddSessionRsp.Unmarshal(m, b)
}
func (m *DummyAddSessionRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DummyAddSessionRsp.Marshal(b, m, deterministic)
}
func (dst *DummyAddSessionRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyAddSessionRsp.Merge(dst, src)
}
func (m *DummyAddSessionRsp) XXX_Size() int {
	return xxx_messageInfo_DummyAddSessionRsp.Size(m)
}
func (m *DummyAddSessionRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyAddSessionRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DummyAddSessionRsp proto.InternalMessageInfo

func (m *DummyAddSessionRsp) GetCtx() *Context {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func init() {
	proto.RegisterType((*Eap)(nil), "aaa.protos.eap")
	proto.RegisterType((*EapIdentity)(nil), "aaa.protos.eap_identity")
	proto.RegisterType((*EapMethodList)(nil), "aaa.protos.eap_method_list")
	proto.RegisterType((*DummyAddSessionReq)(nil), "aaa.protos.dummy_add_session_req")
	proto.RegisterType((*DummyAddSessionRsp)(nil), "aaa.protos.dummy_add_session_rsp")
	proto.RegisterEnum("aaa.protos.EapType", EapType_name, EapType_value)
	proto.RegisterEnum("aaa.protos.EapCode", EapCode_name, EapCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthenticatorClient is the client API for Authenticator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticatorClient interface {
	// handle_identity passes Identity EAP payload to corresponding method provider & returns corresponding
	// EAP result
	// NOTE: Identity Request is handled by APs & does not involve EAP Authenticator's support
	HandleIdentity(ctx context.Context, in *EapIdentity, opts ...grpc.CallOption) (*Eap, error)
	// handle handles passed EAP payload & returns corresponding EAP result
	Handle(ctx context.Context, in *Eap, opts ...grpc.CallOption) (*Eap, error)
	// supported_methods returns sorted list (ascending, by type) of registered EAP Provider Methods
	SupportedMethods(ctx context.Context, in *Void, opts ...grpc.CallOption) (*EapMethodList, error)
	// Adds a non-eap session to auth/accounting
	AddSession(ctx context.Context, in *DummyAddSessionReq, opts ...grpc.CallOption) (*DummyAddSessionRsp, error)
}

type authenticatorClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticatorClient(cc *grpc.ClientConn) AuthenticatorClient {
	return &authenticatorClient{cc}
}

func (c *authenticatorClient) HandleIdentity(ctx context.Context, in *EapIdentity, opts ...grpc.CallOption) (*Eap, error) {
	out := new(Eap)
	err := c.cc.Invoke(ctx, "/aaa.protos.authenticator/handle_identity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorClient) Handle(ctx context.Context, in *Eap, opts ...grpc.CallOption) (*Eap, error) {
	out := new(Eap)
	err := c.cc.Invoke(ctx, "/aaa.protos.authenticator/handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorClient) SupportedMethods(ctx context.Context, in *Void, opts ...grpc.CallOption) (*EapMethodList, error) {
	out := new(EapMethodList)
	err := c.cc.Invoke(ctx, "/aaa.protos.authenticator/supported_methods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticatorClient) AddSession(ctx context.Context, in *DummyAddSessionReq, opts ...grpc.CallOption) (*DummyAddSessionRsp, error) {
	out := new(DummyAddSessionRsp)
	err := c.cc.Invoke(ctx, "/aaa.protos.authenticator/add_session", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticatorServer is the server API for Authenticator service.
type AuthenticatorServer interface {
	// handle_identity passes Identity EAP payload to corresponding method provider & returns corresponding
	// EAP result
	// NOTE: Identity Request is handled by APs & does not involve EAP Authenticator's support
	HandleIdentity(context.Context, *EapIdentity) (*Eap, error)
	// handle handles passed EAP payload & returns corresponding EAP result
	Handle(context.Context, *Eap) (*Eap, error)
	// supported_methods returns sorted list (ascending, by type) of registered EAP Provider Methods
	SupportedMethods(context.Context, *Void) (*EapMethodList, error)
	// Adds a non-eap session to auth/accounting
	AddSession(context.Context, *DummyAddSessionReq) (*DummyAddSessionRsp, error)
}

func RegisterAuthenticatorServer(s *grpc.Server, srv AuthenticatorServer) {
	s.RegisterService(&_Authenticator_serviceDesc, srv)
}

func _Authenticator_HandleIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EapIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServer).HandleIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.authenticator/HandleIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServer).HandleIdentity(ctx, req.(*EapIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenticator_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Eap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.authenticator/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServer).Handle(ctx, req.(*Eap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenticator_SupportedMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServer).SupportedMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.authenticator/SupportedMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServer).SupportedMethods(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenticator_AddSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyAddSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticatorServer).AddSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.authenticator/AddSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticatorServer).AddSession(ctx, req.(*DummyAddSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authenticator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aaa.protos.authenticator",
	HandlerType: (*AuthenticatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handle_identity",
			Handler:    _Authenticator_HandleIdentity_Handler,
		},
		{
			MethodName: "handle",
			Handler:    _Authenticator_Handle_Handler,
		},
		{
			MethodName: "supported_methods",
			Handler:    _Authenticator_SupportedMethods_Handler,
		},
		{
			MethodName: "add_session",
			Handler:    _Authenticator_AddSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eap.proto",
}

// EapRouterClient is the client API for EapRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EapRouterClient interface {
	// handle_identity passes Identity EAP payload to corresponding method provider & returns corresponding
	// EAP result
	// NOTE: Identity Request is handled by APs & does not involve EAP Authenticator's support
	HandleIdentity(ctx context.Context, in *EapIdentity, opts ...grpc.CallOption) (*Eap, error)
	// handle handles passed EAP payload & returns corresponding EAP result
	Handle(ctx context.Context, in *Eap, opts ...grpc.CallOption) (*Eap, error)
	// supported_methods returns sorted list (ascending, by type) of registered EAP Provider Methods
	SupportedMethods(ctx context.Context, in *Void, opts ...grpc.CallOption) (*EapMethodList, error)
}

type eapRouterClient struct {
	cc *grpc.ClientConn
}

func NewEapRouterClient(cc *grpc.ClientConn) EapRouterClient {
	return &eapRouterClient{cc}
}

func (c *eapRouterClient) HandleIdentity(ctx context.Context, in *EapIdentity, opts ...grpc.CallOption) (*Eap, error) {
	out := new(Eap)
	err := c.cc.Invoke(ctx, "/aaa.protos.eap_router/handle_identity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eapRouterClient) Handle(ctx context.Context, in *Eap, opts ...grpc.CallOption) (*Eap, error) {
	out := new(Eap)
	err := c.cc.Invoke(ctx, "/aaa.protos.eap_router/handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eapRouterClient) SupportedMethods(ctx context.Context, in *Void, opts ...grpc.CallOption) (*EapMethodList, error) {
	out := new(EapMethodList)
	err := c.cc.Invoke(ctx, "/aaa.protos.eap_router/supported_methods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EapRouterServer is the server API for EapRouter service.
type EapRouterServer interface {
	// handle_identity passes Identity EAP payload to corresponding method provider & returns corresponding
	// EAP result
	// NOTE: Identity Request is handled by APs & does not involve EAP Authenticator's support
	HandleIdentity(context.Context, *EapIdentity) (*Eap, error)
	// handle handles passed EAP payload & returns corresponding EAP result
	Handle(context.Context, *Eap) (*Eap, error)
	// supported_methods returns sorted list (ascending, by type) of registered EAP Provider Methods
	SupportedMethods(context.Context, *Void) (*EapMethodList, error)
}

func RegisterEapRouterServer(s *grpc.Server, srv EapRouterServer) {
	s.RegisterService(&_EapRouter_serviceDesc, srv)
}

func _EapRouter_HandleIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EapIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EapRouterServer).HandleIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.eap_router/HandleIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EapRouterServer).HandleIdentity(ctx, req.(*EapIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EapRouter_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Eap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EapRouterServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.eap_router/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EapRouterServer).Handle(ctx, req.(*Eap))
	}
	return interceptor(ctx, in, info, handler)
}

func _EapRouter_SupportedMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EapRouterServer).SupportedMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aaa.protos.eap_router/SupportedMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EapRouterServer).SupportedMethods(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _EapRouter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aaa.protos.eap_router",
	HandlerType: (*EapRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handle_identity",
			Handler:    _EapRouter_HandleIdentity_Handler,
		},
		{
			MethodName: "handle",
			Handler:    _EapRouter_Handle_Handler,
		},
		{
			MethodName: "supported_methods",
			Handler:    _EapRouter_SupportedMethods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eap.proto",
}

func init() { proto.RegisterFile("eap.proto", fileDescriptor_eap_21f73d95affd57ca) }

var fileDescriptor_eap_21f73d95affd57ca = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x52, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0xdd, 0x6c, 0x4a, 0x3f, 0x6e, 0x37, 0x76, 0x3a, 0xa2, 0x2e, 0xeb, 0x4b, 0x0d, 0x14, 0x4b,
	0x95, 0x2e, 0xac, 0xf8, 0x5a, 0x58, 0x6d, 0x0b, 0xa5, 0x1f, 0xc8, 0xd6, 0xfa, 0xe0, 0x4b, 0xb8,
	0x66, 0x6e, 0xb3, 0x83, 0x49, 0x66, 0x9a, 0x99, 0xe8, 0xe6, 0xaf, 0xf8, 0x03, 0xfc, 0x1d, 0xfe,
	0x32, 0x95, 0x69, 0xb2, 0x18, 0x96, 0x85, 0x0a, 0x3e, 0xf9, 0x94, 0x39, 0xdc, 0x73, 0xef, 0x39,
	0xf7, 0xe6, 0xc0, 0x06, 0xa1, 0x3e, 0xd0, 0x85, 0xb2, 0x8a, 0x03, 0x22, 0xd6, 0x4f, 0x33, 0x08,
	0x62, 0x95, 0x5b, 0x9a, 0xd9, 0x1a, 0x87, 0x27, 0xe0, 0x13, 0x6a, 0xde, 0x87, 0x35, 0x8d, 0x55,
	0xaa, 0x50, 0xf4, 0xbd, 0x1d, 0x6f, 0xaf, 0x37, 0x99, 0x43, 0xbe, 0x0b, 0x7e, 0x6c, 0x67, 0xfd,
	0xee, 0x8e, 0xb7, 0xb7, 0x39, 0x7a, 0x78, 0xf0, 0x67, 0xd2, 0x41, 0x33, 0x68, 0xe2, 0xea, 0x61,
	0x02, 0x3d, 0x42, 0x1d, 0x49, 0x41, 0xb9, 0x95, 0xb6, 0xfa, 0xe7, 0x81, 0xfc, 0x31, 0xac, 0x66,
	0x64, 0xa7, 0x4a, 0xf4, 0xfd, 0x1d, 0x6f, 0x2f, 0x98, 0x34, 0x28, 0x7c, 0x01, 0x5b, 0x4e, 0xa8,
	0x46, 0x51, 0x2a, 0x8d, 0x75, 0x5a, 0x35, 0x34, 0x73, 0xad, 0x06, 0x86, 0x87, 0xf0, 0x48, 0x94,
	0x59, 0x56, 0x45, 0x28, 0x44, 0x64, 0xc8, 0x18, 0xa9, 0xf2, 0xa8, 0xa0, 0xdb, 0xb9, 0x09, 0xef,
	0x9e, 0xad, 0x96, 0xf7, 0x1b, 0xfd, 0x97, 0xfd, 0xfb, 0xdf, 0x3d, 0x58, 0x77, 0x6e, 0x6d, 0xa5,
	0x89, 0xf7, 0x60, 0x7d, 0x42, 0x86, 0x8a, 0x2f, 0x24, 0x58, 0xc7, 0xa1, 0xd3, 0xe6, 0x58, 0xcc,
	0xe3, 0x0c, 0x7a, 0x97, 0xca, 0xca, 0x1b, 0x19, 0xa3, 0x95, 0x2a, 0x67, 0x5d, 0xfe, 0x00, 0xe0,
	0x9c, 0x12, 0x8c, 0xab, 0xe8, 0x12, 0x3f, 0x33, 0x9f, 0x6f, 0x43, 0x70, 0x71, 0xf4, 0x3a, 0x7a,
	0x3b, 0xc5, 0x34, 0xa5, 0x3c, 0x21, 0xb6, 0xc2, 0x03, 0x58, 0x3f, 0x9e, 0x69, 0xcc, 0x05, 0x09,
	0xf6, 0xd3, 0xe3, 0xdb, 0xd0, 0x3b, 0x9e, 0x69, 0x2a, 0x64, 0x46, 0xb9, 0xc5, 0x94, 0xfd, 0xf2,
	0xf8, 0x1a, 0xf8, 0xef, 0xcf, 0xaf, 0x58, 0xe0, 0x1e, 0x57, 0xa7, 0x17, 0x8c, 0xbb, 0xc7, 0xf8,
	0x6c, 0xcc, 0x9e, 0x38, 0xfd, 0xf1, 0xd9, 0xf8, 0x9d, 0x63, 0xb3, 0xd1, 0xfe, 0x65, 0xed, 0x33,
	0x56, 0x82, 0x78, 0x00, 0x1b, 0xd7, 0xb9, 0xa0, 0x1b, 0x99, 0xdf, 0x19, 0xdd, 0x84, 0xb5, 0x09,
	0xdd, 0x96, 0x64, 0x2c, 0xf3, 0x9a, 0x1d, 0xb4, 0xca, 0x0d, 0xb1, 0xae, 0x2b, 0x5d, 0x95, 0x71,
	0x4c, 0xc6, 0x30, 0xdf, 0x81, 0x13, 0x94, 0x69, 0x59, 0x10, 0x5b, 0x19, 0x7d, 0xeb, 0x42, 0x80,
	0xa5, 0x9d, 0xba, 0x05, 0x63, 0xb4, 0xaa, 0xe0, 0x87, 0xb0, 0x35, 0xc5, 0x5c, 0xa4, 0xd4, 0xca,
	0x48, 0xfb, 0x6e, 0xed, 0xf4, 0x0c, 0xb6, 0x16, 0x2a, 0x61, 0x87, 0xbf, 0x84, 0xd5, 0xba, 0x9f,
	0x2f, 0x16, 0x97, 0xb1, 0x8f, 0x60, 0xdb, 0x94, 0x5a, 0xab, 0xc2, 0x92, 0x68, 0xb2, 0x62, 0x38,
	0x6b, 0xf3, 0x3e, 0x28, 0x29, 0x06, 0x4f, 0x17, 0x1d, 0xb4, 0x62, 0x15, 0x76, 0xf8, 0x35, 0x6c,
	0xb6, 0x7e, 0x3c, 0x7f, 0xd6, 0x66, 0x2f, 0xcd, 0xd5, 0xe0, 0x3e, 0x8a, 0xd1, 0x61, 0x67, 0xf4,
	0xc3, 0x03, 0x70, 0x62, 0x85, 0x2a, 0x2d, 0xfd, 0x97, 0x97, 0x79, 0xf3, 0xfc, 0xe3, 0x6e, 0x86,
	0x49, 0x86, 0xc3, 0x1b, 0x4a, 0x86, 0x09, 0x5a, 0xfa, 0x8a, 0xd5, 0xd0, 0x65, 0x5b, 0xc6, 0x64,
	0x86, 0x88, 0x38, 0xac, 0x5b, 0x3f, 0xad, 0xde, 0x7d, 0x5f, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x83, 0x1a, 0xa9, 0x60, 0x8e, 0x04, 0x00, 0x00,
}
